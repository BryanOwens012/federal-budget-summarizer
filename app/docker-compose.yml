## docker-compose down
## docker-compose up -d

services:
  api:
    build:
      context: ./packages/backend/api
      dockerfile: dockerfile
    ports:
      - "8000:8000"  # Map FastAPI's port
    environment:
      - DATABASE_URL=${POSTGRES_DB_URL}
      - CORS_ORIGINS=http://localhost:3000,http://frontend:3000,example-nextjs-fastapi-production.up.railway.app
      - NEXT_PUBLIC_API_URL=http://backend
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CR_PDF_PATH=${CR_PDF_PATH_IN_API_PACKAGE}
      - NEXT_PUBLIC_RAILWAY_FE_URL=${NEXT_PUBLIC_RAILWAY_FE_URL}
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy # Ensure the database is ready before backend starts
    volumes:
      # Mount the source code for hot reloading
      - .:/api

  postgres:
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      retries: 5
    build:
      context: ./packages/backend/db
      dockerfile: dockerfile
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    networks:
      - app-network
    volumes:
      - postgres-data:/var/lib/postgresql/data

  frontend:
    build:
      context: ./packages/frontend
      dockerfile: dockerfile
    ports:
      - "3000:3000"  # Map Next.js's port
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_RAILWAY_URL=${NEXT_PUBLIC_RAILWAY_FE_URL}
    networks:
      - app-network
    depends_on:
      - api  # Ensure the backend is ready before frontend starts
      - postgres
    volumes:
      # Mount source code for hot reloading, but keep build files intact
      - ./.next:/src/.next
      - ./db:/src/db
      - ./pages:/src/pages
      - ./public:/src/public
      - ./styles:/src/styles

volumes:
  postgres-data:

networks:
  app-network:
    driver: bridge