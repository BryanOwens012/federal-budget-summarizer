# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.27.0
# source: products.sql
from typing import Iterator, Optional

import sqlalchemy

from db import models


CREATE_PRODUCT = """-- name: create_product \\:one
INSERT INTO products (name, pricecents)
VALUES (:p1, :p2)
RETURNING id, name, pricecents, createdat, updatedat
"""


GET_PRODUCT = """-- name: get_product \\:one
SELECT id, name, pricecents, createdat, updatedat
FROM products
WHERE id = :p1
"""


LIST_PRODUCTS = """-- name: list_products \\:many
SELECT id, name, pricecents, createdat, updatedat
FROM products
"""


class Querier:
    def __init__(self, conn: sqlalchemy.engine.Connection):
        self._conn = conn

    def create_product(self, *, name: str, pricecents: Optional[int]) -> Optional[models.Product]:
        row = self._conn.execute(sqlalchemy.text(CREATE_PRODUCT), {"p1": name, "p2": pricecents}).first()
        if row is None:
            return None
        return models.Product(
            id=row[0],
            name=row[1],
            pricecents=row[2],
            createdat=row[3],
            updatedat=row[4],
        )

    def get_product(self, *, id: int) -> Optional[models.Product]:
        row = self._conn.execute(sqlalchemy.text(GET_PRODUCT), {"p1": id}).first()
        if row is None:
            return None
        return models.Product(
            id=row[0],
            name=row[1],
            pricecents=row[2],
            createdat=row[3],
            updatedat=row[4],
        )

    def list_products(self) -> Iterator[models.Product]:
        result = self._conn.execute(sqlalchemy.text(LIST_PRODUCTS))
        for row in result:
            yield models.Product(
                id=row[0],
                name=row[1],
                pricecents=row[2],
                createdat=row[3],
                updatedat=row[4],
            )
