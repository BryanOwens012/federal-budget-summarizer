# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.27.0
# source: us_states.sql
from typing import Iterator, Optional

import sqlalchemy

from db import models


CREATE_US_STATE = """-- name: create_us_state \\:one
INSERT INTO us_states (name)
VALUES (:p1)
RETURNING id, name, createdat, updatedat
"""


GET_US_STATE = """-- name: get_us_state \\:one
SELECT id, name, createdat, updatedat
FROM us_states
WHERE id = :p1
"""


LIST_US_STATES = """-- name: list_us_states \\:many
SELECT id, name, createdat, updatedat
FROM us_states
"""


class Querier:
    def __init__(self, conn: sqlalchemy.engine.Connection):
        self._conn = conn

    def create_us_state(self, *, name: Optional[str]) -> Optional[models.UsState]:
        row = self._conn.execute(sqlalchemy.text(CREATE_US_STATE), {"p1": name}).first()
        if row is None:
            return None
        return models.UsState(
            id=row[0],
            name=row[1],
            createdat=row[2],
            updatedat=row[3],
        )

    def get_us_state(self, *, id: int) -> Optional[models.UsState]:
        row = self._conn.execute(sqlalchemy.text(GET_US_STATE), {"p1": id}).first()
        if row is None:
            return None
        return models.UsState(
            id=row[0],
            name=row[1],
            createdat=row[2],
            updatedat=row[3],
        )

    def list_us_states(self) -> Iterator[models.UsState]:
        result = self._conn.execute(sqlalchemy.text(LIST_US_STATES))
        for row in result:
            yield models.UsState(
                id=row[0],
                name=row[1],
                createdat=row[2],
                updatedat=row[3],
            )
