# Build stage
FROM node:18-alpine AS builder

# Put build files in /app (not /frontend)
WORKDIR /app

# Copy package files first to leverage Docker cache
COPY package.json yarn.lock ./

# Install dependencies
RUN yarn install --frozen-lockfile

# Copy config files
COPY next.config.ts tsconfig.json postcss.config.js tailwind.config.ts ./

# Copy the rest of the application
COPY . .

# Build the application
RUN yarn build

# Production stage
FROM node:18-alpine AS runner

# Put build files in /app (not /frontend)
WORKDIR /app

# Set production environment
ENV NODE_ENV production

# Create source directories
RUN mkdir -p /src/.next /src/db /src/pages /src/public /src/styles

# Copy necessary files from builder
COPY --from=builder /app/package.json ./package.json
COPY --from=builder /app/yarn.lock ./yarn.lock
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/components ./components
COPY --from=builder /app/db ./db
COPY --from=builder /app/pages ./pages
COPY --from=builder /app/public ./public
COPY --from=builder /app/styles ./styles

# Install production dependencies only
RUN yarn install --production --frozen-lockfile

# Document that the container will listen on port 3000
EXPOSE 3000
ENV PORT 3000

# Start the application
CMD ["yarn", "start"]